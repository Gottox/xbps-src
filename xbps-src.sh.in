#!/bin/sh
#
# Copyright (c) 2008-2012 Juan Romero Pardines.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-
readonly XBPS_SRC_VERSION=@@XBPS_SRC_VERSION@@
readonly BASE_CHROOT_REQ="0.28_1"
readonly XBPS_UTILS_REQVER="0.16"
readonly XBPS_UTILS_REQAPIVER="20120605"

if [ -n "$IN_CHROOT" ]; then
	export XBPS_ETCDIR=/usr/local/etc/xbps
	export XBPS_SHAREDIR=/usr/local/share/xbps-src
	export XBPS_LIBEXECDIR=/usr/local/libexec/xbps-src
else
	export XBPS_PREFIX=${DESTDIR}@@XBPS_INSTALL_PREFIX@@
	export XBPS_ETCDIR=${DESTDIR}@@XBPS_INSTALL_ETCDIR@@
	export XBPS_SBINDIR=${DESTDIR}@@XBPS_INSTALL_SBINDIR@@
	export XBPS_SHAREDIR=${DESTDIR}@@XBPS_INSTALL_SHAREDIR@@
	export XBPS_LIBEXECDIR=${DESTDIR}@@XBPS_INSTALL_LIBEXECDIR@@
fi

XBPS_CONFIG_FILE=${XBPS_ETCDIR}/xbps-src.conf
PROGNAME=$(basename $0)
FAKEROOT_CMD="fakeroot --"
CHROOT_CMD=chroot
XBPS_MACHINE=$(uname -m)

# Required utilities in host system for the bootstrap target.
REQHOST_UTILS_BOOTSTRAP="awk bash bison sed gcc msgfmt patch makeinfo \
	perl fakeroot tar xz gzip bzip2"
# Required utilities in host system for chroot ops.
REQHOST_UTILS="xbps-bin.static xbps-repo.static xbps-uhelper.static"

check_reqhost_utils() {
	local broken

	[ -n "$IN_CHROOT" ] && return 0
	[ -n "$1" ] && utils=${REQHOST_UTILS_BOOTSTRAP}

	for f in ${REQHOST_UTILS}; do
		if ! command -v ${f} 2>&1 >/dev/null; then
			echo "${f} is missing in your system, can't continue!"
			broken=1
		fi
	done
	[ -n "$broken" ] && exit 1
	[ -z "$1" ] && return 0

	for f in ${REQHOST_UTILS_BOOTSTRAP}; do
		if ! command -v ${f} 2>&1 >/dev/null; then
			echo "${f} is missing in your system, can't continue!"
			broken=1
		fi
	done
	[ -n "$broken" ] && exit 1
}

usage() {
	cat << _EOF
$PROGNAME: [-Chk] [-c file] [-m dir] <target> [pkgname]

Targets: (only one may be specified)
 binary-bootstrap
   Install bootstrap packages from host repositories into <masterdir>.

 bootstrap
   Build and install from source the bootstrap packages into <masterdir>.

 bootstrap-update
   Updates bootstrap packages with latest versions available from registered
   repositories in the XBPS configuration file, by default set to
   <masterdir>/usr/local/etc/xbps/xbps.conf.

 build [pkgname]
   Build package source (fetch + extract + configure + build).

 build-pkg [pkgname]
   Build binary package for <pkgname> and all required dependencies.

 checkvers
   Checks installed package versions in <masterdir> against the srcpkgs tree
   for new available versions.

 chroot
   Enter to the chroot in <masterdir>.

 clean [pkgname]
   Remove <pkgname> build directory.

 remove-autodeps
   Removes all package dependencies installed automatically.

 configure [pkgname]
   Configure a package (fetch + extract + configure).

 extract [pkgname]
   Extract package source distribution file(s) into the build directory.
   By default set to <masterdir>/builddir.

 fetch [pkgname]
   Download package source distribution file(s).

 fetch-srcpkgs
   Fetches the "xbps-packages" repository from XBPS_SRCPKGS_REPOURL settting
   in xbps-src.conf into XBPS_DISTDIR.

 install-destdir [pkgname]
   Install target package into <destdir> but not building the binary package
   and not removing build directory for inspection purposes.

 remove-destdir [pkgname]
   Remove target package from <destdir>. If <pkgname>-<version> is not matched
   from build template nothing is removed.

 make-repoidx
   Build a package index for the local repository associated with the
   master directory <masterdir>. By default set to <masterdir/host/binpkgs.
   To specify another repo, use -p <dir>.

 repo-checkvers
   Compares available version from local repository against version in
   srcpkgs and tells you when a binary package is outdated.

 setcaps
   Sets required capabilities in xbps-src utilities to be able to build
   binary packages in a chroot with a regular user (not root).
   Please note that you must be root for this and the filesystem storing
   <masterdir> must support extended attributes.

 show [pkgname]
   Show information for the specified package.

 show-deps <pkgname> <build|run>
   Show required dependencies for <pkgname>. If <build> is set, only build time
   dependencies are shown, if <run> is set only run time dependencies are shown.

 show-revdeps <pkgname>
   Show reverse dependencies for <pkgname>, i.e packages that are currently
   depending on <pkgname>.

On targets that accept [pkgname], a package name can be specified and xbps-src
will execute the task on any CWD (Current Working Directory). If the argument
is omitted xbps-src assumes that CWD is in the target package. Example:

	$ cd srcpkgs/xbps && xbps-src build-pkg
	$ xbps-src build-pkg xbps

Both ways are equivalent.

Options:
 -C  Do not remove build directory after successful installation.
 -c  Path to global configuration file:
     if not specified ${XBPS_ETCDIR}/xbps-src.conf is used.
 -h  Usage output.
 -K  Do not remove automatic package dependencies.
 -m  Master directory to install packages and build binary packages,
     overwritting the value set in configuration file xbps-src.conf.
_EOF
}

basename_cwd() {
	echo $(basename $(pwd))
}

check_path() {
	eval local orig="$1"

	case "$orig" in
		/) ;;
		/*) orig="${orig%/}" ;;
		*) orig="$(pwd)/${orig%/}" ;;
	esac

	path_fixed="$orig"
}

run_file() {
	local file="$1"

	check_path "$file"
	. $path_fixed
}

check_config_vars() {
	local val= cffound= f= cfpaths= cf="xbps-src.conf"

	if [ -z "$XBPS_CONFIG_FILE" ]; then
		cfpaths="@@XBPS_INSTALL_PREFIX@@/etc/${cf} ./etc/${cf}"
		for f in $cfpaths; do
			if [ -f ${f} ]; then
				XBPS_CONFIG_FILE=${f}
				cffound=yes
				break
			fi
		done
		if [ -z "$cffound" ]; then
			echo "cannot find a config file"
			exit 1
		fi
	fi

	run_file ${XBPS_CONFIG_FILE}
	export XBPS_CONFIG_FILE=$path_fixed

	if [ ! -f "$XBPS_CONFIG_FILE" ]; then
		echo "cannot find configuration file: $XBPS_CONFIG_FILE"
		exit 1
	fi

	for f in XBPS_DISTDIR XBPS_MASTERDIR; do
		eval val="\$${f}"
		if [ -z "$val" ]; then
			echo "${f} not set in configuration file!"
			exit 1
		fi
	done
	if [ -d "$XBPS_MASTERDIR" -a ! -w "$XBPS_MASTERDIR" ]; then
		echo "ERROR: not enough perms for masterdir $XBPS_MASTERDIR."
		exit 1
	fi
}

#
# main()
#
while getopts "Cc:hKm:V" opt; do
	case $opt in
	C) export KEEP_WRKSRC=1;;
	c) XBPS_CONFIG_FILE="$OPTARG";;
	h) usage && exit 0;;
	K) export KEEP_AUTODEPS=1;;
	m)
		_MASTERDIR_FLAG=1
		_MASTERDIR="$OPTARG"
		if [ ! -d ${_MASTERDIR} ]; then
			mkdir -p ${_MASTERDIR}
		fi
		;;
	V) echo $XBPS_SRC_VERSION && exit 0;;
	--) shift; break;;
	esac
done
shift $(($OPTIND - 1))

[ $# -eq 0 -o $# -gt 3 ] && usage && exit 1

target="$1"
_pkgname="$2"
_optarget="$3"

#
# Check for required utilities in host system.
#
check_reqhost_utils

#
# Check configuration vars before anyting else, and set defaults vars.
#
check_config_vars
if [ -n "${_MASTERDIR}" ]; then
	export XBPS_MASTERDIR=${_MASTERDIR}
fi
. ${XBPS_SHAREDIR}/shutils/init_funcs.sh
set_defvars

# Override stuff for user/root builds.
if [ -z "$IN_CHROOT" ]; then
	CHROOT_CMD="@@XBPS_INSTALL_LIBEXECDIR@@/capchroot"
fi

if [ "$(id -u)" -eq 0 ]; then
	# disable sudo and fakeroot if uid==0
	CHROOT_CMD="chroot"
	unset FAKEROOT_CMD
fi

#
# Sanitize PATH.
#
if [ -z "$IN_CHROOT" ]; then
	# In non chroot case always prefer host tools.
	MYPATH="$PATH:$XBPS_MASTERDIR/bin:$XBPS_MASTERDIR/usr/bin"
	MYPATH="$MYPATH:$XBPS_MASTERDIR/usr/local/bin"
	MYPATH="$MYPATH:$XBPS_MASTERDIR/usr/local/sbin"
	export PATH="$MYPATH"
else
	MYPATH="/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin"
	MYPATH="$MYPATH:/usr/local/bin:/usr/lib/perl5/core_perl/bin"
	export PATH="$MYPATH"
	if [ -n "$XBPS_CCACHE" ]; then
		CCACHEPATH="/usr/lib/ccache/bin"
		if [ -n "$XBPS_HOSTDIR" ]; then
			[ ! -d "$XBPS_HOSTDIR/ccache" ] && \
				mkdir -p $XBPS_HOSTDIR/ccache
			export CCACHE_DIR="$XBPS_HOSTDIR/ccache"
		else
			[ ! -d "$XBPS_MASTERDIR/host/ccache" ] && \
				mkdir -p $XBPS_MASTERDIR/host/ccache
			export CCACHE_DIR="$XBPS_MASTERDIR/host/ccache"
		fi
		export PATH="$CCACHEPATH:$PATH"
	fi
fi

if [ ! -f $XBPS_MASTERDIR/.xbps_perms_done ]; then
	check_installed_pkg base-chroot-$BASE_CHROOT_REQ
	if [ $? -eq 0 ]; then
		# Prepare chroot if required base-chroot pkg is installed.
		msg_normal "Preparing chroot on $XBPS_MASTERDIR...\n"
		prepare_chroot || return $?
	fi
fi

if [ -f $XBPS_MASTERDIR/.xbps_perms_done ]; then
	CHROOT_READY=1
fi

#
# Main switch.
#
case "$target" in
binary-bootstrap)
	# binary bootstrap
	msg_normal "Installing bootstrap from binary package repositories...\n"
	xbps-repo.static -r $XBPS_MASTERDIR sync && \
		xbps-bin.static -r $XBPS_MASTERDIR \
			-c $XBPS_MASTERDIR/host/repocache \
			-y install base-chroot && \
			msg_normal "Installed bootstrap successfully!\n"
	;;
bootstrap)
	# bootstrap from sources
	# check for required host utils
	check_reqhost_utils bootstrap
	[ ! -d $XBPS_SRCPKGDIR/base-chroot ] && \
		msg_error "Cannot find $XBPS_SRCPKGDIR/base-chroot directory!\n"
	cd $XBPS_SRCPKGDIR/base-chroot && _ORIGINPKG="$(basename_cwd)"
	setup_tmpl ${_ORIGINPKG} && install_pkg
	;;
bootstrap-update)
	if [ -n "$CHROOT_READY" -a -z "$IN_CHROOT" ]; then
		chroot_handler ${target} dummy
	else
		${FAKEROOT_CMD} ${XBPS_BIN_CMD} -y autoupdate
	fi
	;;
checkvers)
	check_installed_packages
	;;
chroot)
	chroot_handler chroot dummy
	;;
clean)
	if [ -z "${_pkgname}" ]; then
		[ ! -r ./template ] && msg_error "missing build template in $(pwd).\n"
		_pkgname=$(basename_cwd)
	fi
	setup_tmpl ${_pkgname}
	remove_tmpl_wrksrc $wrksrc
	;;
remove-autodeps)
	if [ -n "$CHROOT_READY" -a -z "$IN_CHROOT" ]; then
		chroot_handler remove-autodeps dummy
	else
		pkgver=xbps-src
		remove_pkg_autodeps
	fi
	;;
extract|fetch)
	if [ -z "${_pkgname}" ]; then
		[ ! -r ./template ] && msg_error "missing build template in $(pwd).\n"
		_pkgname=$(basename_cwd)
	fi
	setup_tmpl ${_pkgname}
	if [ "$target" = "info" ]; then
		info_tmpl
		exit $?
	fi
	fetch_distfiles $update_checksum
	[ "$target" = "extract" ] && extract_distfiles
	;;
fetch-srcpkgs)
	if ! command -v git 2>&1 >/dev/null; then
		msg_error "git command not found, can't fetch repository."
	fi
	if [ ! -d $XBPS_DISTDIR/.git ]; then
		git clone $XBPS_SRCPKGS_REPOURL $XBPS_DISTDIR
	fi
	;;
build|configure|install-destdir|build-pkg)
	BEGIN_INSTALL=1
	if [ -z "${_pkgname}" ]; then
		[ ! -r ./template ] && msg_error "missing build template in $(pwd).\n"
		_pkgname=$(basename_cwd)
	fi
	setup_tmpl ${_pkgname}
	_ORIGINPKG="${_pkgname}"
	if [ -n "$CHROOT_READY" -a -z "$IN_CHROOT" ]; then
		chroot_handler $target ${_ORIGINPKG} || exit $?
	else
		install_pkg "$target" || exit $?
	fi
	;;
remove-destdir)
	if [ -z "${_pkgname}" ]; then
		[ ! -r ./template ] && msg_error "missing build template in $(pwd).\n"
		_pkgname=$(basename_cwd)
	fi
	setup_tmpl ${_pkgname}
	remove_pkg $target
	;;
list)
	$XBPS_BIN_CMD list
	;;
make-repoidx)
	make_repoidx
	;;
repo-checkvers)
	check_repository_packages
	;;
setcaps)
	if [ -z "$IN_CHROOT" ]; then
		if [ "$(id -u)" -ne 0 ]; then
			msg_error "only root can set capabilities!\n"
		fi
		for f in mount umount; do
			echo -n "Setting CAP_SYS_ADMIN capability to $XBPS_LIBEXECDIR/cap${f}... "
			setcap cap_sys_admin=ep $XBPS_LIBEXECDIR/cap${f}
			if [ $? -eq 0 ]; then
				echo "done."
			else
				echo "FAILED!"
			fi
		done
		echo -n "Setting CAP_SYS_CHROOT capability to $XBPS_LIBEXECDIR/capchroot... "
		setcap cap_sys_chroot=ep $XBPS_LIBEXECDIR/capchroot
		if [ $? -eq 0 ]; then
			echo "done."
		else
			echo "FAILED!"
		fi
	fi
	;;
show)
	if [ -z "${_pkgname}" ]; then
		[ ! -r ./template ] && msg_error "missing build template in $(pwd).\n"
		_pkgname=$(basename_cwd)
	fi
	setup_subpkg_tmpl ${_pkgname}
	show_tmpl
	;;
show-deps)
	setup_subpkg_tmpl ${_pkgname}
	if [ -z "${_optarget}" ]; then
		msg_error "missing dependency type: build or run.\n"
	fi
	show_tmpl_deps ${_optarget}
	;;
show-revdeps)
	show_pkg_revdeps ${_pkgname}
	;;
*)
	msg_red "xbps-src: invalid target $target.\n"
	usage && exit 1
esac

# Agur
exit $?
